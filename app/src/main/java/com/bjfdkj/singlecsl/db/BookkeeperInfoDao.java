package com.bjfdkj.singlecsl.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bjfdkj.singlecsl.db.bean.BookkeeperInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOKKEEPER_INFO".
*/
public class BookkeeperInfoDao extends AbstractDao<BookkeeperInfo, Long> {

    public static final String TABLENAME = "BOOKKEEPER_INFO";

    /**
     * Properties of entity BookkeeperInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _ID = new Property(0, Long.class, "_ID", true, "_id");
        public final static Property Zongbumen = new Property(1, String.class, "zongbumen", false, "ZONGBUMEN");
        public final static Property BookkeeperId = new Property(2, Long.class, "bookkeeperId", false, "BOOKKEEPER_ID");
    }

    private DaoSession daoSession;


    public BookkeeperInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookkeeperInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOKKEEPER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _ID
                "\"ZONGBUMEN\" TEXT," + // 1: zongbumen
                "\"BOOKKEEPER_ID\" INTEGER);"); // 2: bookkeeperId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOKKEEPER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookkeeperInfo entity) {
        stmt.clearBindings();
 
        Long _ID = entity.get_ID();
        if (_ID != null) {
            stmt.bindLong(1, _ID);
        }
 
        String zongbumen = entity.getZongbumen();
        if (zongbumen != null) {
            stmt.bindString(2, zongbumen);
        }
 
        Long bookkeeperId = entity.getBookkeeperId();
        if (bookkeeperId != null) {
            stmt.bindLong(3, bookkeeperId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookkeeperInfo entity) {
        stmt.clearBindings();
 
        Long _ID = entity.get_ID();
        if (_ID != null) {
            stmt.bindLong(1, _ID);
        }
 
        String zongbumen = entity.getZongbumen();
        if (zongbumen != null) {
            stmt.bindString(2, zongbumen);
        }
 
        Long bookkeeperId = entity.getBookkeeperId();
        if (bookkeeperId != null) {
            stmt.bindLong(3, bookkeeperId);
        }
    }

    @Override
    protected final void attachEntity(BookkeeperInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookkeeperInfo readEntity(Cursor cursor, int offset) {
        BookkeeperInfo entity = new BookkeeperInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // zongbumen
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // bookkeeperId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookkeeperInfo entity, int offset) {
        entity.set_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZongbumen(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookkeeperId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookkeeperInfo entity, long rowId) {
        entity.set_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookkeeperInfo entity) {
        if(entity != null) {
            return entity.get_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookkeeperInfo entity) {
        return entity.get_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
