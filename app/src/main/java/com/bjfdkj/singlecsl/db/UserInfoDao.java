package com.bjfdkj.singlecsl.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.bjfdkj.singlecsl.db.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _ID = new Property(0, Long.class, "_ID", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Userunit = new Property(2, String.class, "userunit", false, "USERUNIT");
        public final static Property Usersex = new Property(3, String.class, "usersex", false, "USERSEX");
        public final static Property Usernation = new Property(4, String.class, "usernation", false, "USERNATION");
        public final static Property Userduty = new Property(5, String.class, "userduty", false, "USERDUTY");
        public final static Property UserId = new Property(6, Long.class, "userId", false, "USER_ID");
    }

    private Query<UserInfo> bookkeeperInfo_UserInfoQuery;

    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _ID
                "\"USERNAME\" TEXT," + // 1: username
                "\"USERUNIT\" TEXT," + // 2: userunit
                "\"USERSEX\" TEXT," + // 3: usersex
                "\"USERNATION\" TEXT," + // 4: usernation
                "\"USERDUTY\" TEXT," + // 5: userduty
                "\"USER_ID\" INTEGER NOT NULL );"); // 6: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long _ID = entity.get_ID();
        if (_ID != null) {
            stmt.bindLong(1, _ID);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String userunit = entity.getUserunit();
        if (userunit != null) {
            stmt.bindString(3, userunit);
        }
 
        String usersex = entity.getUsersex();
        if (usersex != null) {
            stmt.bindString(4, usersex);
        }
 
        String usernation = entity.getUsernation();
        if (usernation != null) {
            stmt.bindString(5, usernation);
        }
 
        String userduty = entity.getUserduty();
        if (userduty != null) {
            stmt.bindString(6, userduty);
        }
        stmt.bindLong(7, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long _ID = entity.get_ID();
        if (_ID != null) {
            stmt.bindLong(1, _ID);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String userunit = entity.getUserunit();
        if (userunit != null) {
            stmt.bindString(3, userunit);
        }
 
        String usersex = entity.getUsersex();
        if (usersex != null) {
            stmt.bindString(4, usersex);
        }
 
        String usernation = entity.getUsernation();
        if (usernation != null) {
            stmt.bindString(5, usernation);
        }
 
        String userduty = entity.getUserduty();
        if (userduty != null) {
            stmt.bindString(6, userduty);
        }
        stmt.bindLong(7, entity.getUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userunit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // usersex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // usernation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userduty
            cursor.getLong(offset + 6) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.set_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserunit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsersex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsernation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserduty(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.set_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.get_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.get_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userInfo" to-many relationship of BookkeeperInfo. */
    public List<UserInfo> _queryBookkeeperInfo_UserInfo(Long userId) {
        synchronized (this) {
            if (bookkeeperInfo_UserInfoQuery == null) {
                QueryBuilder<UserInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                bookkeeperInfo_UserInfoQuery = queryBuilder.build();
            }
        }
        Query<UserInfo> query = bookkeeperInfo_UserInfoQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
